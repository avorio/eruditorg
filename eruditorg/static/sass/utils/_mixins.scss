/**
* Import Bootstrap's mixins
*/

// Utilities
@import "../vendor/bootstrap-mixins/hide-text";
@import "../vendor/bootstrap-mixins/opacity";
@import "../vendor/bootstrap-mixins/image";
@import "../vendor/bootstrap-mixins/labels";
@import "../vendor/bootstrap-mixins/reset-filter";
@import "../vendor/bootstrap-mixins/resize";
@import "../vendor/bootstrap-mixins/responsive-visibility";
@import "../vendor/bootstrap-mixins/size";
@import "../vendor/bootstrap-mixins/tab-focus";
@import "../vendor/bootstrap-mixins/reset-text";
@import "../vendor/bootstrap-mixins/text-emphasis";
@import "../vendor/bootstrap-mixins/text-overflow";
@import "../vendor/bootstrap-mixins/vendor-prefixes";
@import "../vendor/bootstrap-mixins/clearfix";
@import "../vendor/bootstrap-mixins/nav-vertical-align";
@import "../vendor/bootstrap-mixins/border-radius";

// Components
@import "../vendor/bootstrap-mixins/component-animations.scss";
@import "../vendor/bootstrap-mixins/alerts";
@import "../vendor/bootstrap-mixins/buttons";
@import "../vendor/bootstrap-mixins/panels";
@import "../vendor/bootstrap-mixins/pagination";
@import "../vendor/bootstrap-mixins/list-group";
@import "../vendor/bootstrap-mixins/nav-divider";
@import "../vendor/bootstrap-mixins/forms";
@import "../vendor/bootstrap-mixins/progress-bar";
@import "../vendor/bootstrap-mixins/table-row";
@import "../vendor/bootstrap-mixins/navbar";

// Skins
@import "../vendor/bootstrap-mixins/background-variant";
@import "../vendor/bootstrap-mixins/gradients";

// Layout
@import "../vendor/bootstrap-mixins/center-block";
@import "../vendor/bootstrap-mixins/grid-framework";
@import "../vendor/bootstrap-mixins/grid";


/**
* App-specific Mixins
*/

// font styles
@mixin font-styles($fonf-family) {

  @if $fonf-family == "sans" {
    @include fw-sans;

    em, i    { @include fw-sans-normal-italic; }

    strong, b  { @include fw-sans-medium; }

    // bold italics
    em strong,
    strong em,
    i strong,
    strong i,
    b i,
    i b {
      @include fw-sans-medium-italic;
    }

  }

  @if $fonf-family == "serif" {
    @include fw-serif-normal;

    em, i    { @include fw-serif-normal-italic; }

    strong, b  { @include fw-serif-bold; }

    // bold italics
    em strong,
    strong em,
    i strong,
    strong i,
    b i,
    i b {
      @include fw-serif-bold-italic;
    }

  }

}

// Remove list styles
@mixin list-unstyled() {
  margin: 0;
  padding: 0;
  list-style: none;
  li {
    margin: 0;
    padding: 0;
  }
}

// Vertical centering
@mixin vertical-centered($position: relative) {
  position: $position;
  top: 50%;
  -webkit-filter: blur(0);
  @include translate(0,-50%);
}

@mixin parent-box-centered($position: absolute) {
  position: $position;
  top: 50%;
  left: 50%;
  -webkit-filter: blur(0);
  @include translate(-50%,-50%);
}

// Keyframe animations
@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

/// Border-radius vendor prefixes
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

// Column-break-inside vendor prefixes
@mixin column-break-inside($break) {
  -webkit-column-break-inside: $break;
  -moz-column-break-inside: $break;
  -o-column-break-inside: $break;
  -ms-column-break-inside: $break;
  column-break-inside: $break;
}

// Column-count vendor prefixes
@mixin column-count($count) {
  -webkit-column-count: $count;
  -moz-column-count: $count;
  -o-column-count: $count;
  column-count: $count;
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/**
* Create a top or bottom border for Bootstrap's grid cell
*/
@mixin grid-cell-border($direction: 'top', $border-width: 1px, $border-color: $gray-base) {
  position: relative;

  @if $direction == 'top' {
    &:before {
      content: "";
      display: block;
      height: 1px;
      border-top: $border-width solid $border-color;
      position: absolute;
      left: $grid-gutter-width/2;
      right: $grid-gutter-width/2;
      top: 0;
    }
  }

  @if $direction == 'bottom' {
    &:after {
      content: "";
      display: block;
      height: 1px;
      border-top: $border-width solid $border-color;
      position: absolute;
      left: $grid-gutter-width/2;
      right: $grid-gutter-width/2;
      bottom: 0;
      // clear: both;
    }
  }
}

/// Responsive manager
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
/// @link http://sass-guidelin.es/#breakpoint-manager Sass Guidelines - Breakpoint Manager
@mixin respond-to($breakpoint) {
  $query: map-get($breakpoints, $breakpoint);

  @if not $query {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }

  @media #{if(type-of($query) == 'string', unquote($query), inspect($query))} {
    @content;
  }
}
